import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  isLoggedIn: false,
  loggedUser: {
    issuer: null,
    email: null
  }
};

export const authenticationSlice = createSlice({
  name: 'authentication',
  initialState,
  reducers: { // todo: we should not need reducers just to create action creators. (check createAction)
    signIn: () => {},
    signInSuccess: (state, action) => {
      state.loggedUser.email = action.payload.email
      state.loggedUser.issuer = action.payload.issuer
    },
    signInFailure: () => {},
    logOut: () => {},
    logOutSuccess: () => {},
    checkIsLoggedInStarted: () => {},
    redirectsStarted: () => {},
    redirectsCompleted: () => {},
    checkIsLoggedInReceived: (state, action) => {
      state.isLoggedIn = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const {
  signIn,
  signInSuccess,
  signInFailure,
  logOut,
  logOutSuccess,
  receiveSignInInfo,
  checkIsLoggedIn,
  checkIsLoggedInStarted,
  checkIsLoggedInReceived,
  redirectsStarted,
  redirectsCompleted
} = authenticationSlice.actions;
export const isLoggedIn = (state) => state.isLoggedIn;
export const getIssuer = (state) => state.loggedUser.issuer;
export const getEmail = (state) => state.loggedUser.email;
export default authenticationSlice.reducer;
